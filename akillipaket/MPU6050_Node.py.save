import rclpy
from rclpy.node import Node
import math
import time
from std_msgs.msg import String, Float64MultiArray
from .MPU6050_driver.MPU6050 import MPU6050
import FaBo9Axis_MPU9250
from sensor_msgs.msg import Imu 
import numpy as np

class MPU6050_Node(Node):

    def __init__(self):
        super().__init__('MPU6050')
        self.mpu6050_publisher_ = self.create_publisher(Imu, '/akillipaket/IMU/Sensor_Data', 4)
        self.magnetometer_publisher_ = self.create_publisher(Float64MultiArray, '/akillipaket/IMU/Magnetometer', 4)
        
        self.mpu9250 = FaBo9Axis_MPU9250.MPU9250()
        self.magnetometer_msg = Float64MultiArray()
        self.variation = 4.528986*(np.pi/180)
        self.angle_offset = 65
        
        self.i = 0
        self.i2c_bus = 1
        self.device_address = 0x68
        # The offsets are different for each device and should be changed
        # accordingly using a calibration procedure
        self.x_accel_offset = -83
        self.y_accel_offset = 3934
        self.z_accel_offset = -801
        self.x_gyro_offset = -23
        self.y_gyro_offset = 193
        self.z_gyro_offset = 41
        self.gravity = 9.8065
        self.enable_debug_output = True

        self.mpu = MPU6050(self.i2c_bus, self.device_address, self.x_accel_offset, self.y_accel_offset,
                      self.z_accel_offset, self.x_gyro_offset, self.y_gyro_offset, self.z_gyro_offset,
                      self.enable_debug_output)

        self.mpu.dmp_initialize()
        self.mpu.set_DMP_enabled(True)
        self.mpu_int_status = self.mpu.get_int_status()
        print(hex(self.mpu_int_status))

        self.packet_size = self.mpu.DMP_get_FIFO_packet_size()
        print(self.packet_size)
        self.FIFO_count = self.mpu.get_FIFO_count()
        print(self.FIFO_count)
        self.value = 0
        self.count = 0
        self.FIFO_buffer = [0]*64
        self.counter = 0
        self.FIFO_count_list = list()
        self.calibre_a = 0.00123563121085
        self.calibre_g = 3.65345386383e-08
        

        print (' get ready for acceleration x1')
        time.sleep(5)
        print (' x1 started')
        self.sensor_msg = Imu()
        
        
        
        
    def euler_angles_to_quaternions(self, psi, theta, phi):

        w = np.cos(phi * 0.5) * np.cos(theta * 0.5) * np.cos(psi * 0.5) \
            + np.sin(phi * 0.5) * np.sin(theta * 0.5) * np.sin(psi * 0.5)
        x = np.sin(phi * 0.5) * np.cos(theta * 0.5) * np.cos(psi * 0.5) \
            - np.cos(phi * 0.5) * np.sin(theta * 0.5) * np.sin(psi * 0.5)
        y = np.cos(phi * 0.5) * np.sin(theta * 0.5) * np.cos(psi * 0.5) \
            + np.sin(phi * 0.5) * np.cos(theta * 0.5) * np.sin(psi * 0.5)
        z = np.cos(phi * 0.5) * np.cos(theta * 0.5) * np.sin(psi * 0.5) \
            - np.sin(phi * 0.5) * np.sin(theta * 0.5) * np.cos(psi * 0.5)
        
        return w, x, y, z
        
        
    def wrap(self, angle, offset):
        if 0 < angle < offset:
            yaw = angle + 360 - offset
            return yaw

        elif angle - offset < 0:
            yaw = 360 - angle + offset
            return yaw
        else:
            yaw = angle - offset
            return yaw
        
        
    def tilt_compensated_heading(self, bx, by, bz, phi, theta):
        """ Takes in raw magnetometer values, pitch and roll and turns it into a tilt-compensated heading value ranging from -pi to pi (everything in this      function should be in radians). """
        variation = 4.528986*(pi/180) # magnetic variation for Corpus Christi, should match your bx/by/bz and where they were measured from (a lookup table is beyond the scope of this gist)
        Xh = bx * np.cos(theta) + by * np.sin(phi) * np.sin(theta) + bz * np.cos(phi) * np.sin(theta)
        Yh = by * np.cos(phi) - bz * np.sin(phi)
        return self.wrap((atan2(-Yh, Xh) + variation))



    def sensor_callback(self):
        


        self.FIFO_count = self.mpu.get_FIFO_count()
        self.mpu_int_status = self.mpu.get_int_status()
         
        # If overflow is detected by status or fifo count we want to reset
        if (self.FIFO_count == 1024) or (self.mpu_int_status & 0x10):
            self.mpu.reset_FIFO()

              
        # Check if fifo data is ready
        elif (self.mpu_int_status & 0x02):
            # Wait until packet_size number of bytes are ready for reading, default
            # is 42 bytes
            while self.FIFO_count < self.packet_size:
                self.FIFO_count = self.mpu.get_FIFO_count()
                
                  
            self.FIFO_buffer = self.mpu.get_FIFO_bytes(self.packet_size)
            #accel = mpu.DMP_get_acceleration_int16(FIFO_buffer)
            gyro = self.mpu.get_rotation()
            quat = self.mpu.DMP_get_quaternion_int16(self.FIFO_buffer)
            grav = self.mpu.DMP_get_gravity(quat)
            euler_angles = self.mpu.DMP_get_euler_roll_pitch_yaw(quat, grav)
            accel = self.mpu.get_acceleration(self.FIFO_buffer, self.calibre_a)        
            grav = self.mpu.get_gravity(quat,self.calibre_g)
            linear_accel = self.mpu.linear_acceleration(accel, grav)
            gyro = self.mpu9250.readGyro()
            

            x1 = float(euler_angles.x) #- offx
            y1 = float(euler_angles.y) #- offy
            z1 = float(euler_angles.z) #- offz
            #print (x1, y1, z1)
            
            qw, qx, qy, qz = self.euler_angles_to_quaternions(euler_angles.x, euler_angles.y, euler_angles.z)
            self.mpu.reset_FIFO()
            #self.sensor_msg.data = [float(euler_angles.x), float(euler_angles.y), float(euler_angles.z)]
            self.sensor_msg.orientation.w = qw
            self.sensor_msg.orientation.x = qx
            self.sensor_msg.orientation.y = qy
            self.sensor_msg.orientation.z = qz
            
            self.sensor_msg.linear_acceleration.x = linear_accel.x
            self.sensor_msg.linear_acceleration.y = linear_accel.y
            self.sensor_msg.linear_acceleration.z = linear_accel.z

            self.sensor_msg.angular_velocity.x = float(gyro['x'])
            self.sensor_msg.angular_velocity.y = float(gyro['y'])
            self.sensor_msg.angular_velocity.z = float(gyro['z'])
            self.mpu6050_publisher_.publish(self.sensor_msg)
            #self.get_logger().info('Publishing: "%s"' % self.sensor_msg.data)
            
        mag = self.mpu9250.readMagnet()    
        if mag['x']!=0 and mag['y']!=0 and mag['z']!=0:
            mag = [(mag['x']+23.2595)*0.928715, (mag['y']-25.8245)*0.94582, (mag['z']-27.526)*1.154787]
            azimuth = np.arctan2( mag[0],mag[1] ) * 180 / np.pi + 180
            yaw = self.wrap(azimuth, self.variation + self.angle_offset) #calibrated to compass
            yaw = yaw - 180

            self.magnetometer_msg.data = [mag[0], mag[1], mag[2]] 
                
            self.magnetometer_publisher_.publish(self.magnetometer_msg)


def main(args=None):
    rclpy.init(args=args)

    mpu6050 = MPU6050_Node()

    while rclpy.ok():
        mpu6050.sensor_callback()

    mpu6050.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
